{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/Sort.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","navigate","useNavigate","useState","query","setQuery","getCenturyParams","century","currentCenturies","getAll","includes","filter","item","String","className","get","sex","type","placeholder","onChange","event","newQuery","target","updatedSearchParams","map","classNames","centuries","length","Loader","Sort","sortBy","currentSortBy","sortOrder","nextSortOrder","sort","getSearchParams","PeopleTable","people","slugName","useParams","location","useLocation","queryParams","genderFilter","queryFilter","centuryFilter","Number","currentSortOrder","filteredPeopleBySex","person","filteredPeopleByQuery","name","toLowerCase","motherName","fatherName","filteredPeopleByCentury","Math","floor","born","visiblepeople","a","b","sortValue","localeCompare","died","slug","mother","find","possibleMother","father","possibleFather","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","loading","setLoading","isError","setIsError","peopleFromServer","setPeopleFromServer","useEffect","getPeople","catch","finally","getLinkClass","isActive","Navbar","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.26939432.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const centuries = [16, 17, 18, 19, 20];\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const [query, setQuery] = useState<string>('');\n\n  const getCenturyParams = (century: string) => {\n    const currentCenturies = searchParams.getAll('centuries');\n\n    return currentCenturies.includes(century)\n      ? currentCenturies.filter(item => item !== century)\n      : [String(century), ...searchParams.getAll('centuries')];\n  };\n\n  const handleQuery: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const newQuery = event.target.value;\n\n    setQuery(newQuery);\n    const updatedSearchParams = new URLSearchParams(searchParams.toString());\n\n    if (newQuery) {\n      updatedSearchParams.set('query', newQuery);\n    } else {\n      updatedSearchParams.delete('query');\n    }\n\n    navigate(`?${updatedSearchParams.toString()}`);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={searchParams.get('sex') === null ? 'is-active' : ''}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={searchParams.get('sex') === 'm' ? 'is-active' : ''}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={searchParams.get('sex') === 'f' ? 'is-active' : ''}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQuery}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map(century => {\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={classNames('button mr-1', {\n                    'is-info': searchParams.getAll('centuries')\n                      .includes(String(century)),\n                  })}\n                  params={{\n                    centuries: getCenturyParams(String(century)),\n                  }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': searchParams.getAll('centuries').length > 0,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, query: null, centuries: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\ntype SortProps = {\n  sortBy:string;\n};\n\nexport const Sort = ({ sortBy }: SortProps) => {\n  const [searchParams] = useSearchParams();\n  const currentSortBy = searchParams.get('sort');\n  const sortOrder = searchParams.get('sortOrder');\n\n  const getSearchParams = () => {\n    let nextSortOrder: string | null = 'ASC';\n\n    if (currentSortBy === sortBy) {\n      nextSortOrder = sortOrder === 'ASC' ? 'DESC' : null;\n    }\n\n    return {\n      sort: nextSortOrder === null ? null : sortBy,\n      sortOrder: nextSortOrder,\n    };\n  };\n\n  return (\n    <SearchLink params={getSearchParams()}>\n      <span className=\"icon\">\n        <i\n          className={classNames('fas fa-sort', {\n            'fa-sort-up': currentSortBy === sortBy && sortOrder === 'ASC',\n            'fa-sort-down': currentSortBy === sortBy && sortOrder === 'DESC',\n          })}\n        />\n      </span>\n    </SearchLink>\n  );\n};\n","import classNames from 'classnames';\nimport {\n  NavLink,\n  useLocation,\n  useParams,\n  useSearchParams,\n} from 'react-router-dom';\nimport { Person } from '../types';\nimport { Sort } from './Sort';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable = ({ people }: Props) => {\n  const { slugName } = useParams();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const genderFilter = queryParams.get('sex');\n  const queryFilter = queryParams.get('query');\n  const centuryFilter = queryParams.getAll('centuries').map(Number);\n  const [searchParams] = useSearchParams();\n  const currentSortBy = searchParams.get('sort');\n  const currentSortOrder = searchParams.get('sortOrder');\n\n  const filteredPeopleBySex = genderFilter\n    ? people?.filter(person => person.sex === genderFilter)\n    : people;\n\n  const filteredPeopleByQuery = queryFilter\n    ? filteredPeopleBySex?.filter(person => {\n      return person.name.toLowerCase().includes(queryFilter.toLowerCase())\n        || person.motherName?.toLowerCase().includes(queryFilter.toLowerCase())\n        || person.fatherName?.toLowerCase().includes(queryFilter.toLowerCase());\n    })\n    : filteredPeopleBySex;\n\n  const filteredPeopleByCentury = centuryFilter.length > 0\n    ? filteredPeopleByQuery?.filter(person => (\n      (centuryFilter).includes(\n        Math.floor((Number(person.born) / 100) + 1),\n      )))\n    : filteredPeopleByQuery;\n\n  const visiblepeople = filteredPeopleByCentury;\n\n  if (currentSortBy && filteredPeopleByCentury) {\n    const sortFunction = (a: Person, b: Person) => {\n      const sortValue = currentSortOrder === 'ASC' ? 1 : -1;\n\n      switch (currentSortBy) {\n        case 'name':\n          return sortValue * a.name.localeCompare(b.name);\n        case 'sex':\n          return sortValue * a.sex.localeCompare(b.sex);\n        case 'born':\n          return sortValue * (a.born - b.born);\n        case 'died':\n          return sortValue * (a.died - b.died);\n        default:\n          return 0;\n      }\n    };\n\n    visiblepeople?.sort(sortFunction);\n  }\n\n  return (\n    <>\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <thead>\n          <tr>\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                Name\n                <Sort sortBy=\"name\" />\n              </span>\n            </th>\n\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                Sex\n                <Sort sortBy=\"sex\" />\n              </span>\n            </th>\n\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                Born\n                <Sort sortBy=\"born\" />\n              </span>\n            </th>\n\n            <th>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                Died\n                <Sort sortBy=\"died\" />\n              </span>\n            </th>\n\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visiblepeople?.map(person => {\n            const {\n              name,\n              slug,\n              sex,\n              born,\n              died,\n              motherName,\n              fatherName,\n            } = person;\n            const mother = visiblepeople?.find(possibleMother => possibleMother\n              .name === motherName);\n            const father = visiblepeople?.find(possibleFather => possibleFather\n              .name === fatherName);\n\n            return (\n              <tr\n                data-cy=\"person\"\n                key={slug}\n                className={classNames({\n                  'has-background-warning': slug === slugName,\n                })}\n              >\n                <td>\n                  <NavLink\n                    to={`/people/${slug}?${searchParams.toString()}`}\n                    className={classNames({\n                      'has-text-danger': sex === 'f',\n                    })}\n                  >\n                    {name}\n                  </NavLink>\n                </td>\n\n                <td>{sex}</td>\n                <td>{born}</td>\n                <td>{died}</td>\n\n                {mother ? (\n                  <td>\n                    <NavLink to={`/people/${mother.slug}?${searchParams.toString()}`} className=\"has-text-danger\">\n                      {mother.name}\n                    </NavLink>\n                  </td>\n                ) : (\n                  <td>{motherName || '-'}</td>\n                )}\n\n                {father ? (\n                  <td>\n                    <NavLink to={`/people/${father.slug}?${searchParams.toString()}`}>\n                      {father.name}\n                    </NavLink>\n                  </td>\n                ) : (\n                  <td>{fatherName || '-'}</td>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      { visiblepeople?.length === 0\n        && <p>There are no people matching the current search criteria</p>}\n    </>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [peopleFromServer, setPeopleFromServer] = useState<Person[]>([]);\n\n  useEffect(() => {\n    setLoading(true);\n    getPeople()\n      .then((people) => {\n        setPeopleFromServer(people);\n        setLoading(false);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {loading && <Loader />}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!loading && peopleFromServer.length < 1 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {/* <p>There are no people matching the current search criteria</p> */}\n\n              {!loading && peopleFromServer.length > 1 && (\n                <PeopleTable people={peopleFromServer} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slugName\" element={<PeoplePage />} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}